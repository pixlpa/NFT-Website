import '../styles/App.css';
import React, { useState, useEffect } from "react";
import { ethers } from "ethers";
import NFTContract from '../utils/NFTContract.json'; //replace with ABI json generated by hardhat

const WalletUi = (props) => {
    const [wallet, setWallet] = useState("");
    const [contract, setContract] = useState();
    const [mintingActive, setMintingActive] = useState("");
    const PRICE = props.price;
    const checkIfWalletIsConnected = async () => {
        const { ethereum } = window; 
        if (!ethereum) {
            console.log("Make sure you have metamask!");
            return;
        } else {
            console.log("We have the ethereum object", ethereum);
        }
  
        const accounts = await ethereum.request({ method: 'eth_accounts' });
  
        if (accounts.length !== 0) {
            const account = accounts[0];
            console.log("Found an authorized account:", account);
                      setWallet(account)
            connectWallet();
        } else {
            console.log("No authorized account found")
        }
        let chainId = await ethereum.request({ method: 'eth_chainId' });
        console.log("Connected to chain " + chainId);
  
        // String, hex code of the chainId of the Ethereum Mainnet network
        // Change this for running via Testnet
        const mainnetChainId = "0x1"; 
        if (chainId !== mainnetChainId) {
          alert("You are not connected to the Ethereum Mainnet!");
        }
    }

    const connectWallet = async () => {
        try {
            const { ethereum } = window;
            if (!ethereum) {
            alert("Get MetaMask!");
            return;
            }
            const accounts = await ethereum.request({ method: "eth_requestAccounts" });
            console.log("Connected", accounts[0]);
            setWallet(accounts[0]);
            connectContract(); 
        } catch (error) {
            console.log(error)
        }
    }

    const connectContract = async () => {
        try {
            const { ethereum } = window;

            if (ethereum) {
                const provider = new ethers.providers.Web3Provider(ethereum);
                const signer = provider.getSigner();
                const connectedContract = new ethers.Contract(props.contract, NFTContract.abi, signer);
                setContract(connectedContract);
                await connectedContract.mintActive().then(result=> {
                    if(result){
                         console.log("mint Active: "+result);
                         setMintingActive(result);
                    }
                })
                console.log("Setup minting contract");

            } else {
                console.log("Ethereum object doesn't exist!");
            }
            } catch (error) {
            console.log(error)
            }
    }

    const askContractToMintNft = async () => {
        try {
          const { ethereum } = window;    
          if (ethereum && contract) {
            //
            let nftTxn = await contract.buy({value: ethers.utils.parseEther(PRICE)});
            console.log("Mining...please wait.")
            await nftTxn.wait();           
            console.log(`Mined, see transaction: https://etherscan.io/tx/${nftTxn.hash}`);
    
          } else {
            console.log("Ethereum object doesn't exist!");
          }
        } catch (error) {
          console.log(error)
        }
    }

    useEffect(()=>{
        checkIfWalletIsConnected();
        connectContract();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    },[]);

    return (               
        <div className="mint-container">
         { (wallet === "") ?   (          
            <button onClick={connectWallet} className="cta-button connect-wallet-button">
                Connect to Wallet
            </button>
        ) : (mintingActive ? 
            (
            <button onClick={askContractToMintNft} className="cta-button mint-button">
                Mint (0.1 ETH)
            </button>
            ) :(
                <button className="cta-button no-mint-button">
                    Mint Not Yet Active
                </button>
            )
        )}
        { (wallet === "") ? (<p>No wallet connected</p>) : (<p>Connected to wallet {wallet}</p>)}
        <p><a href={props.openSeaLink}>View on OpenSea</a></p>
        </div>
    );
};

export default WalletUi;

